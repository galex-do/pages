---
layout: post
title:  "Централизованное логирование"
date:   2023-01-20 15:21:14 +0000
categories: howto
---

Представим, что вы — системный инженер в небольшой IT-компании. У компании десять серверов; некоторые обслуживают бухгалтерию, некоторые используются для разработки и тестирования ПО. Вам нужно обеспечивать стабильную работу серверов, анализировать их работу, а в случае сбоев — быстро находить причину сбоя. В поиске причин вам помогут логи, а системы централизованного логирования позволят собрать логи со всех серверов в одно место и значительно сократят время поиска.

В этом занятии мы освежим то, что уже знаем о логах, а также разберемся, как их аггрегировать и анализировать. Если мы качественно настроим централизованное логирование, поиск нужных нам записей на 10 и на 100 серверах будет занимать одинаковое время.



---

### Что такое логи?

Почти все приложения, которые мы запускаем, пишут логи. Логи — это записи о событиях, возникающих во время работы программы. Логи в процессе функционирования программы пишутся автоматически и обычно сохраняются в текстовые файлы в отведенную под логи директорию. 

Работая с логами, мы обычно говорим про анализ произошедших событий. Изучая логи, мы можем понять, к примеру:

- Когда и почему возникали системные ошибки (ошибки файловой системы, ошибки выделения памяти, проблемы с сетевыми устройствами и драйверами)
- Когда и кто подключался к серверам — и какие операции выполнял
- Какие запросы идут на наш HTTP-сервер и с каких адресов
- Какие запросы в базу данных выполняются медленнее всего
- Почему приложение не запускается на заданных настройках

Проанализировав события и частоту их возникновения за определенный период, мы можем оценить, является ли такая

#### Где их искать?

В Unix-like операционных системах (например, MacOS и семейство Linux), для логов, как правило, предназначена директория `/var/log`. Там же создаются директории для логов приложений.

{% highlight sh %}
tail /var/log/auth.log

# =>
Jan 23 11:49:37 web-01 systemd-logind[509]: Removed session 1894068.
Jan 23 11:49:42 web-01 sshd[2955520]: Invalid user alex from 124.42.78.202 port 44442
Jan 23 11:49:42 web-01 sshd[2955520]: pam_unix(sshd:auth): check pass; user unknown
Jan 23 11:49:42 web-01 sshd[2955520]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=159.65.34.202
Jan 23 11:49:43 web-01 sshd[2955520]: Failed password for invalid user alex from 124.42.78.202 port 44442 ssh2
Jan 23 11:49:45 web-01 sshd[2955520]: Received disconnect from 124.42.78.202 port 44442:11: Bye Bye [preauth]
Jan 23 11:49:45 web-01 sshd[2955520]: Disconnected from invalid user alex 124.42.78.202 port 44442 [preauth]
Jan 23 11:50:00 web-01 sshd[2955522]: Accepted publickey for ubuntu from 124.42.78.202 port 47368 ssh2: RSA SHA256:#
Jan 23 11:50:00 web-01 sshd[2955522]: pam_unix(sshd:session): session opened for user ubuntu by (uid=0)
Jan 23 11:50:00 web-01 systemd-logind[509]: New session 1894069 of user ubuntu.
{% endhighlight %}

---

### Сбор логов

#### Зачем собирать логи в одно место?

#### Как это делается?

Общая логика большинства решений по централизованному логированию сводится к следующему:

- На каждом сервере есть **приложение-агент**, которое сканирует новые строки в файлах логов (тех, которые мы укажем агенту в конфигурации)
- Агент отправляет собранные логи по сети на адрес аггрегатора

#### Популярные решения

ELK

EFK

Loki + Grafana


#### Настроим сбор логов

---

### В итоге

Итак, на занятии мы вспомнили:

* Зачем нужны логи и где их искать
* Разобрались с концепцией централизованного логирования и что для него используют
* Попробовали настроить логирование с помощью Grafana и Loki
* Познакомились с языком запросов LogQL

Знание, как организовать централизованное логирование, позволит вам упростить контроль событий в больших кластерах серверов, а также контейнерных решениях, таких как Docker и Kubernetes.
